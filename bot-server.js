const express = require('express');
const { Telegraf } = require('telegraf');
const { VK } = require('vk-io');

const app = express();
app.use(express.json());

// –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –¥–ª—è VK-Telegram
class VkTelegramBot {
    constructor() {
        this.isRunning = false;
        this.stats = {
            photosSent: 0,
            startTime: null,
            lastUpdate: null
        };
        
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK API
            this.vk = new VK({
                token: process.env.VK_TOKEN
            });
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–æ–≤
            this.tgBot = new Telegraf(process.env.TG_TOKEN);
            this.controllerBot = new Telegraf(process.env.TG_CONTROLLER_TOKEN);
            
            console.log('–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
        }
    }
    
    async start() {
        if (this.isRunning) {
            console.log('–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
            return;
        }
        
        try {
            console.log('–ó–∞–ø—É—Å–∫ VK-Telegram –±–æ—Ç–∞...');
            this.stats.startTime = new Date();
            this.stats.lastUpdate = new Date();
            this.isRunning = true;
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ VK —Å–ª—É—à–∞—Ç–µ–ª—è
            await this.setupVKListener();
            
            // –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–æ–≤
            await this.tgBot.launch();
            await this.controllerBot.launch();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
            this.setupControllerCommands();
            
            console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
            this.isRunning = false;
            throw error;
        }
    }
    
    async setupVKListener() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å VK API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            const groupId = process.env.VK_GROUP_ID;
            if (!groupId) {
                throw new Error('VK_GROUP_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            }
            
            const groups = await this.vk.api.groups.getById({
                group_ids: groupId // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω group_ids
            });
            
            console.log('‚úÖ VK API –ø–æ–¥–∫–ª—é—á–µ–Ω. –ì—Ä—É–ø–ø–∞:', groups[0]?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ VK
            this.startVKPolling();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VK —Å–ª—É—à–∞—Ç–µ–ª—è:', error.message);
            
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ VK –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
            console.log('‚ö†Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ VK –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
        }
    }
    
    startVKPolling() {
        console.log('üîÑ –ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞ —Å—Ç–µ–Ω—ã VK...');
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç setInterval –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
        setInterval(async () => {
            if (!this.isRunning) return;
            
            try {
                const groupId = process.env.VK_GROUP_ID;
                if (!groupId) {
                    console.log('‚ö†Ô∏è  VK_GROUP_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å');
                    return;
                }
                
                const posts = await this.vk.api.wall.get({
                    owner_id: -Math.abs(parseInt(groupId)),
                    count: 5,
                    filter: 'owner'
                });
                
                console.log(`üìù –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: ${posts.items.length}`);
                this.stats.lastUpdate = new Date();
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã —Å —Ñ–æ—Ç–æ
                await this.processVKPosts(posts.items);
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ VK:', error.message);
            }
        }, 60000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    }
    
    async processVKPosts(posts) {
        for (const post of posts) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ –ø–æ—Å—Ç–µ
            if (post.attachments) {
                const photos = post.attachments.filter(att => att.type === 'photo');
                
                if (photos.length > 0) {
                    console.log(`üì∏ –ù–∞–π–¥–µ–Ω–æ ${photos.length} —Ñ–æ—Ç–æ –≤ –ø–æ—Å—Ç–µ ${post.id}`);
                    
                    try {
                        await this.sendToTelegram(photos, post);
                        this.stats.photosSent += photos.length;
                        console.log(`‚úÖ –§–æ—Ç–æ –∏–∑ –ø–æ—Å—Ç–∞ ${post.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram`);
                    } catch (error) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∏–∑ –ø–æ—Å—Ç–∞ ${post.id}:`, error.message);
                    }
                }
            }
        }
    }
    
    async sendToTelegram(photos, post) {
        try {
            for (const photo of photos) {
                // –ü–æ–ª—É—á–∞–µ–º URL —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ—Ç–æ
                const largestPhoto = photo.photo.sizes.reduce((largest, size) => {
                    return (size.width > largest.width) ? size : largest;
                });
                
                const photoUrl = largestPhoto.url;
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ Telegram –∫–∞–Ω–∞–ª
                await this.tgBot.telegram.sendPhoto(
                    process.env.TG_CHANNEL_ID,
                    photoUrl,
                    {
                        caption: `üì∏ –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–∑ VK\n‚è∞ ${new Date(post.date * 1000).toLocaleString('ru-RU')}`
                    }
                );
                
                console.log('‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error.message);
            throw error;
        }
    }
    
    setupControllerCommands() {
        // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        this.controllerBot.command('start', (ctx) => {
            ctx.reply('ü§ñ –ë–æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω!\\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
        });
        
        this.controllerBot.command('status', (ctx) => {
            if (ctx.from.id.toString() === process.env.TG_ADMIN_ID) {
                const status = this.getStatus();
                ctx.reply(
                    `üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:\\n` +
                    `ü§ñ –ë–æ—Ç: ${status.isRunning ? 'üü¢ –ó–∞–ø—É—â–µ–Ω' : 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\\n` +
                    `üì∏ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${status.photosSent}\\n` +
                    `‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${status.uptime}\\n` +
                    `üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${status.lastUpdate}`
                );
            } else {
                ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
            }
        });
        
        this.controllerBot.command('start_bot', async (ctx) => {
            if (ctx.from.id.toString() === process.env.TG_ADMIN_ID) {
                try {
                    await this.start();
                    ctx.reply('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
                } catch (error) {
                    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: ' + error.message);
                }
            }
        });
        
        this.controllerBot.command('stop_bot', async (ctx) => {
            if (ctx.from.id.toString() === process.env.TG_ADMIN_ID) {
                try {
                    await this.stop();
                    ctx.reply('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                } catch (error) {
                    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: ' + error.message);
                }
            }
        });
        
        console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }
    
    async stop() {
        if (!this.isRunning) {
            console.log('–ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            return;
        }
        
        try {
            console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
            this.isRunning = false;
            
            await this.tgBot.stop();
            await this.controllerBot.stop();
            
            console.log('‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞:', error);
            throw error;
        }
    }
    
    getStatus() {
        const uptime = this.stats.startTime ? 
            Math.floor((new Date() - this.stats.startTime) / 1000) : 0;
        
        const formatUptime = (seconds) => {
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const secs = seconds % 60;
            return `${hours}—á ${minutes}–º ${secs}—Å`;
        };
        
        return {
            isRunning: this.isRunning,
            photosSent: this.stats.photosSent,
            uptime: this.stats.startTime ? formatUptime(uptime) : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω',
            lastUpdate: this.stats.lastUpdate ? 
                this.stats.lastUpdate.toLocaleTimeString('ru-RU') : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
        };
    }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new VkTelegramBot();

// API endpoints –¥–ª—è Cloudflare Worker
app.get('/api/status', (req, res) => {
    try {
        const status = bot.getStatus();
        res.json(status);
    } catch (error) {
        res.status(500).json({ 
            success: false, 
            message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞',
            error: error.message 
        });
    }
});

app.post('/api/control', async (req, res) => {
    const { action } = req.body;
    
    try {
        switch (action) {
            case 'start':
                await bot.start();
                res.json({ success: true, message: '–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω' });
                break;
            case 'stop':
                await bot.stop();
                res.json({ success: true, message: '–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' });
                break;
            case 'restart':
                await bot.stop();
                await new Promise(resolve => setTimeout(resolve, 2000));
                await bot.start();
                res.json({ success: true, message: '–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω' });
                break;
            default:
                res.status(400).json({ success: false, message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' });
        }
    } catch (error) {
        res.status(500).json({ 
            success: false, 
            message: error.message 
        });
    }
});

app.get('/api/config', (req, res) => {
    try {
        const config = {
            VK_TOKEN: process.env.VK_TOKEN ? '***' + process.env.VK_TOKEN.slice(-4) : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            VK_GROUP_ID: process.env.VK_GROUP_ID || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            TG_TOKEN: process.env.TG_TOKEN ? '***' + process.env.TG_TOKEN.slice(-4) : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            TG_CHANNEL_ID: process.env.TG_CHANNEL_ID || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            TG_USER_ID: process.env.TG_USER_ID || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            TG_CONTROLLER_TOKEN: process.env.TG_CONTROLLER_TOKEN ? '***' + process.env.TG_CONTROLLER_TOKEN.slice(-4) : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            TG_ADMIN_ID: process.env.TG_ADMIN_ID || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
        };
        
        res.json(config);
    } catch (error) {
        res.status(500).json({ 
            success: false, 
            message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
            error: error.message 
        });
    }
});

// Health check endpoint
app.get('/health', (req, res) => {
    res.json({ 
        status: 'ok', 
        timestamp: new Date().toISOString(),
        botRunning: bot.isRunning 
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
    console.error('Unhandled error:', error);
    res.status(500).json({ 
        success: false, 
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`üöÄ Bot server running on port ${PORT}`);
    console.log(`üìä Health check available at http://localhost:${PORT}/health`);
    console.log(`üîß API endpoints available at http://localhost:${PORT}/api/`);
});
