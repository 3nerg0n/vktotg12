const express = require('express');
const { Telegraf } = require('telegraf');
const { VK } = require('vk-io');

const app = express();
app.use(express.json());

// –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
    console.log(`${new Date().toISOString()} ${req.method} ${req.path}`);
    next();
});

// –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –¥–ª—è VK-Telegram
class VkTelegramBot {
    constructor() {
        this.isRunning = false;
        this.stats = {
            photosSent: 0,
            startTime: null,
            lastUpdate: null,
            lastPostId: 0,
            checkedPosts: new Set() // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        };
        this.vkPollingInterval = null;
        
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...');
    }
    
    async initializeBots() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            if (!process.env.VK_TOKEN) {
                throw new Error('VK_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            }
            if (!process.env.TG_CONTROLLER_TOKEN) {
                throw new Error('TG_CONTROLLER_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK API
            this.vk = new VK({
                token: process.env.VK_TOKEN
            });
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
            this.controllerBot = new Telegraf(process.env.TG_CONTROLLER_TOKEN);
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
            this.controllerBot.catch((err, ctx) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞:', err);
            });
            
            console.log('‚úÖ –ë–æ—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–æ–≤:', error.message);
            return false;
        }
    }
    
    async start() {
        if (this.isRunning) {
            console.log('‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
            return;
        }
        
        try {
            console.log('üöÄ –ó–∞–ø—É—Å–∫ VK-Telegram –±–æ—Ç–∞...');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–æ–≤
            const initialized = await this.initializeBots();
            if (!initialized) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–æ–≤');
            }
            
            this.stats.startTime = new Date();
            this.stats.lastUpdate = new Date();
            this.isRunning = true;
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
            try {
                await this.controllerBot.launch();
                console.log('‚úÖ –ë–æ—Ç-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∑–∞–ø—É—â–µ–Ω');
            } catch (controllerError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞:', controllerError.message);
                throw controllerError;
            }
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
            this.setupControllerCommands();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ VK —Å–ª—É—à–∞—Ç–µ–ª—è
            await this.setupVKListener();
            
            console.log('üéâ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
            
        } catch (error) {
            console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
            await this.cleanup();
            throw error;
        }
    }
    
    async setupVKListener() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å VK API
            const groupId = process.env.VK_GROUP_ID;
            if (!groupId) {
                console.warn('‚ö†Ô∏è VK_GROUP_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, VK –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω');
                return;
            }

            console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ VK —Å–ª—É—à–∞—Ç–µ–ª—è –¥–ª—è –≥—Ä—É–ø–ø—ã:', groupId);
            
            const groups = await this.vk.api.groups.getById({
                group_ids: groupId
            });
            
            console.log('‚úÖ VK API –ø–æ–¥–∫–ª—é—á–µ–Ω. –ì—Ä—É–ø–ø–∞:', groups[0]?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ ID
            await this.initializeLastPostId();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ VK
            this.startVKPolling();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VK —Å–ª—É—à–∞—Ç–µ–ª—è:', error.message);
            console.log('‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ VK –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
        }
    }
    
    async initializeLastPostId() {
        try {
            const groupId = process.env.VK_GROUP_ID;
            if (!groupId) return;

            console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');
            
            const posts = await this.vk.api.wall.get({
                owner_id: -Math.abs(parseInt(groupId)),
                count: 5,
                filter: 'owner'
            });
            
            if (posts.items.length > 0) {
                // –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π –ø–æ—Å—Ç
                const latestPost = posts.items[0];
                this.stats.lastPostId = latestPost.id;
                console.log(`üìù –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç ID: ${this.stats.lastPostId} –æ—Ç ${new Date(latestPost.date * 1000).toLocaleString('ru-RU')}`);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ—Å—Ç—ã –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                posts.items.forEach(post => {
                    this.stats.checkedPosts.add(post.id);
                });
            } else {
                this.stats.lastPostId = 0;
                console.log('üìù –í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤, –Ω–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –Ω—É–ª—è');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞:', error.message);
            this.stats.lastPostId = 0;
        }
    }
    
    startVKPolling() {
        console.log('üîÑ –ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞ —Å—Ç–µ–Ω—ã VK –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥...');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.vkPollingInterval) {
            clearInterval(this.vkPollingInterval);
        }
        
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        this.checkVKForNewPosts();
        
        // –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
        this.vkPollingInterval = setInterval(() => {
            this.checkVKForNewPosts();
        }, 30000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    }
    
    async checkVKForNewPosts() {
        if (!this.isRunning) {
            console.log('‚è∏Ô∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É VK');
            return;
        }
        
        try {
            const groupId = process.env.VK_GROUP_ID;
            if (!groupId) {
                console.log('‚ö†Ô∏è VK_GROUP_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å');
                return;
            }
            
            console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ VK...');
            
            const posts = await this.vk.api.wall.get({
                owner_id: -Math.abs(parseInt(groupId)),
                count: 10,
                filter: 'owner'
            });
            
            console.log(`üìù –ü–æ–ª—É—á–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: ${posts.items.length}`);
            this.stats.lastUpdate = new Date();
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã
            const newPosts = await this.processNewVKPosts(posts.items);
            
            if (newPosts > 0) {
                console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤: ${newPosts}`);
            } else {
                console.log('üì≠ –ù–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ VK:', error.message);
        }
    }
    
    async processNewVKPosts(posts) {
        let newPostsCount = 0;
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
        const sortedPosts = posts.sort((a, b) => b.date - a.date);
        
        for (const post of sortedPosts) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
            if (this.stats.checkedPosts.has(post.id)) {
                continue;
            }
            
            console.log(`üÜï –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç ID: ${post.id} –æ—Ç ${new Date(post.date * 1000).toLocaleString('ru-RU')}`);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
            this.stats.checkedPosts.add(post.id);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID –µ—Å–ª–∏ –ø–æ—Å—Ç –Ω–æ–≤–µ–µ
            if (post.id > this.stats.lastPostId) {
                this.stats.lastPostId = post.id;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ
            const hasPhotos = await this.processPostPhotos(post);
            
            if (hasPhotos) {
                newPostsCount++;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–æ—Å—Ç–æ–≤
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
        
        return newPostsCount;
    }
    
    async processPostPhotos(post) {
        try {
            if (!post.attachments || post.attachments.length === 0) {
                console.log(`üìÑ –ü–æ—Å—Ç ${post.id} –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                return false;
            }
            
            const photos = post.attachments.filter(att => att.type === 'photo');
            
            if (photos.length === 0) {
                console.log(`üìÑ –ü–æ—Å—Ç ${post.id} –±–µ–∑ —Ñ–æ—Ç–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                return false;
            }
            
            console.log(`üì∏ –í –ø–æ—Å—Ç–µ ${post.id} –Ω–∞–π–¥–µ–Ω–æ ${photos.length} —Ñ–æ—Ç–æ`);
            
            await this.sendPhotosToTelegram(photos, post);
            this.stats.photosSent += photos.length;
            
            console.log(`‚úÖ –§–æ—Ç–æ –∏–∑ –ø–æ—Å—Ç–∞ ${post.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram`);
            return true;
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –∏–∑ –ø–æ—Å—Ç–∞ ${post.id}:`, error.message);
            return false;
        }
    }
    
    async sendPhotosToTelegram(photos, post) {
        try {
            const channelId = process.env.TG_CHANNEL_ID;
            if (!channelId) {
                throw new Error('TG_CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            }
            
            console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ ${photos.length} —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª: ${channelId}`);
            
            // –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
            const firstPhoto = photos[0];
            const largestPhoto = firstPhoto.photo.sizes.reduce((largest, size) => {
                return (size.width > largest.width) ? size : largest;
            }, firstPhoto.photo.sizes[0]);
            
            const photoUrl = largestPhoto.url;
            const postText = post.text ? 
                (post.text.length > 200 ? post.text.substring(0, 200) + '...' : post.text) 
                : '–ù–æ–≤—ã–π –ø–æ—Å—Ç';
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
            await this.controllerBot.telegram.sendPhoto(
                channelId,
                photoUrl,
                {
                    caption: `üì∏ –ù–æ–≤—ã–π –ø–æ—Å—Ç –∏–∑ VK\n\n${postText}\n\n‚è∞ ${new Date(post.date * 1000).toLocaleString('ru-RU')}`
                }
            );
            
            console.log('‚úÖ –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è
            if (photos.length > 1) {
                console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ ${photos.length - 1} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ...`);
                
                for (let i = 1; i < photos.length; i++) {
                    const photo = photos[i];
                    const largestAdditional = photo.photo.sizes.reduce((largest, size) => {
                        return (size.width > largest.width) ? size : largest;
                    }, photo.photo.sizes[0]);
                    
                    await this.controllerBot.telegram.sendPhoto(
                        channelId,
                        largestAdditional.url
                    );
                    
                    console.log(`‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ ${i + 1}/${photos.length} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
                    
                    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã
                    await new Promise(resolve => setTimeout(resolve, 1000));
                }
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error.message);
            throw error;
        }
    }
    
    setupControllerCommands() {
        // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        this.controllerBot.command('start', (ctx) => {
            ctx.reply('ü§ñ –ë–æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
        });
        
        this.controllerBot.command('status', (ctx) => {
            if (ctx.from.id.toString() === process.env.TG_ADMIN_ID) {
                const status = this.getStatus();
                ctx.reply(
                    `üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:\n` +
                    `ü§ñ –ë–æ—Ç: ${status.isRunning ? 'üü¢ –ó–∞–ø—É—â–µ–Ω' : 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n` +
                    `üì∏ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${status.photosSent}\n` +
                    `‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${status.uptime}\n` +
                    `üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${status.lastUpdate}\n` +
                    `üìù –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç ID: ${status.lastPostId}`
                );
            } else {
                ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
            }
        });
        
        this.controllerBot.command('start_bot', async (ctx) => {
            if (ctx.from.id.toString() === process.env.TG_ADMIN_ID) {
                try {
                    await this.start();
                    ctx.reply('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
                } catch (error) {
                    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: ' + error.message);
                }
            }
        });
        
        this.controllerBot.command('stop_bot', async (ctx) => {
            if (ctx.from.id.toString() === process.env.TG_ADMIN_ID) {
                try {
                    await this.stop();
                    ctx.reply('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                } catch (error) {
                    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: ' + error.message);
                }
            }
        });
        
        this.controllerBot.command('test_vk', async (ctx) => {
            if (ctx.from.id.toString() === process.env.TG_ADMIN_ID) {
                try {
                    await this.testVKConnection();
                    ctx.reply('‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VK –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                } catch (error) {
                    ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ VK: ' + error.message);
                }
            }
        });
        
        this.controllerBot.command('force_check', async (ctx) => {
            if (ctx.from.id.toString() === process.env.TG_ADMIN_ID) {
                try {
                    ctx.reply('üîç –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ VK...');
                    await this.checkVKForNewPosts();
                    ctx.reply('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                } catch (error) {
                    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ' + error.message);
                }
            }
        });
        
        console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }
    
    async testVKConnection() {
        try {
            const groupId = process.env.VK_GROUP_ID;
            if (!groupId) {
                throw new Error('VK_GROUP_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            }
            
            console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VK...');
            
            const groups = await this.vk.api.groups.getById({
                group_ids: groupId
            });
            
            const posts = await this.vk.api.wall.get({
                owner_id: -Math.abs(parseInt(groupId)),
                count: 3
            });
            
            console.log('‚úÖ –¢–µ—Å—Ç VK: –£—Å–ø–µ—à–Ω–æ');
            console.log(`   –ì—Ä—É–ø–ø–∞: ${groups[0]?.name}`);
            console.log(`   –ü–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤: ${posts.items.length}`);
            console.log(`   –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç ID: ${posts.items[0]?.id}`);
            console.log(`   –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞: ${posts.items[0] ? new Date(posts.items[0].date * 1000).toLocaleString('ru-RU') : '–ù–µ—Ç –ø–æ—Å—Ç–æ–≤'}`);
            
            return true;
        } catch (error) {
            console.error('‚ùå –¢–µ—Å—Ç VK: –û—à–∏–±–∫–∞', error.message);
            throw error;
        }
    }
    
    async stop() {
        if (!this.isRunning) {
            console.log('‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            return;
        }
        
        try {
            console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
            this.isRunning = false;
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º VK polling
            if (this.vkPollingInterval) {
                clearInterval(this.vkPollingInterval);
                this.vkPollingInterval = null;
                console.log('‚úÖ VK –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            }
            
            // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
            if (this.controllerBot) {
                try {
                    await this.controllerBot.stop();
                    console.log('‚úÖ –ë–æ—Ç-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞:', error.message);
                }
            }
            
            await this.cleanup();
            console.log('‚úÖ –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞:', error);
            await this.cleanup();
            throw error;
        }
    }
    
    async cleanup() {
        this.isRunning = false;
        
        if (this.vkPollingInterval) {
            clearInterval(this.vkPollingInterval);
            this.vkPollingInterval = null;
        }
        
        // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏
        this.controllerBot = null;
        this.vk = null;
    }
    
    getStatus() {
        const uptime = this.stats.startTime ? 
            Math.floor((new Date() - this.stats.startTime) / 1000) : 0;
        
        const formatUptime = (seconds) => {
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const secs = seconds % 60;
            return `${hours}—á ${minutes}–º ${secs}—Å`;
        };
        
        return {
            isRunning: this.isRunning,
            photosSent: this.stats.photosSent,
            uptime: this.stats.startTime ? formatUptime(uptime) : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω',
            lastUpdate: this.stats.lastUpdate ? 
                this.stats.lastUpdate.toLocaleTimeString('ru-RU') : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
            lastPostId: this.stats.lastPostId || 0
        };
    }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new VkTelegramBot();

// API endpoints –¥–ª—è Cloudflare Worker
app.get('/api/status', (req, res) => {
    try {
        console.log('üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞');
        const status = bot.getStatus();
        res.json(status);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        res.status(500).json({ 
            success: false, 
            message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞',
            error: error.message 
        });
    }
});

app.post('/api/control', async (req, res) => {
    const { action } = req.body;
    console.log(`üéÆ –ó–∞–ø—Ä–æ—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${action}`);
    
    try {
        switch (action) {
            case 'start':
                await bot.start();
                res.json({ success: true, message: '–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω' });
                break;
            case 'stop':
                await bot.stop();
                res.json({ success: true, message: '–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' });
                break;
            case 'restart':
                await bot.stop();
                await new Promise(resolve => setTimeout(resolve, 3000));
                await bot.start();
                res.json({ success: true, message: '–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω' });
                break;
            case 'test':
                await bot.testVKConnection();
                res.json({ success: true, message: '–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ' });
                break;
            default:
                res.status(400).json({ success: false, message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' });
        }
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è ${action}:`, error);
        res.status(500).json({ 
            success: false, 
            message: error.message 
        });
    }
});

app.get('/api/config', (req, res) => {
    try {
        console.log('‚öôÔ∏è –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
        const config = {
            VK_TOKEN: process.env.VK_TOKEN ? '***' + process.env.VK_TOKEN.slice(-4) : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            VK_GROUP_ID: process.env.VK_GROUP_ID || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            TG_TOKEN: process.env.TG_TOKEN ? '***' + process.env.TG_TOKEN.slice(-4) : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            TG_CHANNEL_ID: process.env.TG_CHANNEL_ID || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            TG_USER_ID: process.env.TG_USER_ID || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            TG_CONTROLLER_TOKEN: process.env.TG_CONTROLLER_TOKEN ? '***' + process.env.TG_CONTROLLER_TOKEN.slice(-4) : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            TG_ADMIN_ID: process.env.TG_ADMIN_ID || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
        };
        
        res.json(config);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
        res.status(500).json({ 
            success: false, 
            message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
            error: error.message 
        });
    }
});

// Health check endpoint
app.get('/health', (req, res) => {
    res.json({ 
        status: 'ok', 
        timestamp: new Date().toISOString(),
        botRunning: bot.isRunning 
    });
});

// –î–æ–±–∞–≤–ª—è–µ–º endpoint –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ VK
app.post('/api/check_vk', async (req, res) => {
    try {
        console.log('üîç –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ VK —á–µ—Ä–µ–∑ API');
        await bot.checkVKForNewPosts();
        res.json({ success: true, message: '–ü—Ä–æ–≤–µ—Ä–∫–∞ VK –∑–∞–≤–µ—Ä—à–µ–Ω–∞' });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ VK:', error);
        res.status(500).json({ success: false, message: error.message });
    }
});

// Graceful shutdown
process.on('SIGINT', async () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
    await bot.stop();
    process.exit(0);
});

process.on('SIGTERM', async () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
    await bot.stop();
    process.exit(0);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
    console.error('üí• Unhandled error:', error);
    res.status(500).json({ 
        success: false, 
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`üöÄ Bot server running on port ${PORT}`);
    console.log(`üìä Health check available at http://localhost:${PORT}/health`);
    console.log(`üîß API endpoints available at http://localhost:${PORT}/api/`);
    console.log(`üîç –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ VK: POST http://localhost:${PORT}/api/check_vk`);
});
